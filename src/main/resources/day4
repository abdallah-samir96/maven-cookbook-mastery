- One of the most powerful features of Maven is the ability to create documentation for the project.
- Maven itself uses the Site plugin to generate its website.
- mvn site
- mvn help:describe -Dcmd=initialize to know the lifecycle of phase.
- The site command generates reports based on the contents of the
  reporting section (element) of the pom.

*** Generating Javadocs for a site
- we need to add Javadoc plugin to the reporting section of pom.
        This will generate the JavaDoc inside the site
        We can generate the documentation for the java code only, not for the test also.
        - mvn site.
        <reporting>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>2.10.1</version>
                </plugin>
            </plugins>
        </reporting>

- Adding the Maven JXR plugin to the reporting section of pom automatically creates
  the project source code cross-reference.

** Generating unit test reports for a site
- we add the surefire plugin into the reporting section in pom.xml

    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>2.18</version>
    </plugin>
- mvn site -> here will generate site with the unit tests.



- dependencyManagement is just a declaration, and it does not really add a dependency.
- it is used mostly in multi-module projects to define the versions used by the childes.
- Here all dependencies declared in the <dependencyManagement> tag is not in the class path.
- it used to declare version, scope, so on that are used by the childes or by dependencies itself.